// JosLeys-Kleinian
// Reference
// http://www.fractalforums.com/3d-fractal-generation/an-escape-tim-algorithm-for-kleinian-group-limit-sets/msg98248/#msg98248
// 
//   OSL implementation from Mandelbulber 2.22 formula JosLeys-Kleinian
//   by Jesus Sosa with help of Carbuncle Grim (mclarekin) developer of mandelbulber

#include "octane-oslintrin.h"

// vec3 operations   
struct vec3{ float x, y, z; };

vec3 __operator__add__(vec3 a, vec3 b) { return vec3(a.x+b.x, a.y+b.y, a.z+b.z); }
vec3 __operator__mul__(float val, vec3 v) { return vec3(val*v.x, val*v.y, val*v.z); }
vec3 __operator__div__(vec3 a, float b) { return vec3(a.x/b, a.y/b, a.z/b); }
vec3 __operator__mul__(float val, vec3 v) { return vec3(val*v.x, val*v.y, val*v.z);  }
vec3 __operator__mul__(vec3 a, vec3 b) 
{ 
  vector a1=vector(a.x,a.y,a.z);
  vector b1=vector(b.x,b.y,b.z);
  vector c1= a1*b1;
  return vec3(c1[0],c1[1],c1[2]);
}
vec3 __operator__add__(vec3 a, float b) { return vec3(a.x+b, a.y+b, a.z+b); }
vec3 __operator__sub__(vec3 a, float b) { return vec3(a.x-b, a.y-b, a.z-b); }
vec3 __operator__sub__(vec3 a, vec3 b) { return vec3(a.x-b.x, a.y-b.y, a.z-b.z); }
vec3 __operator__mul__(vec3 a, float b) { return vec3(a.x*b, a.y*b, a.z*b); }

float dot(vec3 a, vec3 b) { return a.x*b.x + a.y*b.y + a.z*b.z ; }
float length(vec3 v) { return length(vector(v.x,v.y,v.z)); }


// ------------------------------------------ mat3 ---------------------------------------------------
struct mat3{ float m00, m01, m02, m10, m11, m12, m20, m21, m22; };

mat3 __operator__mul__(float val, mat3 m) { return mat3(val*m.m00, m.m01, m.m02, m.m10, val*m.m11, m.m12, m.m20, m.m21, val * m.m22); }

mat3  rotationMatrix3(vec3 v, float angle)
{ float c = cos(radians(angle)), s = sin(radians(angle)); 
  return mat3(c+(1.0-c)*v.x*v.x, (1.0-c)*v.x*v.y-s*v.z, (1.0-c)*v.x*v.z+s*v.y, 
             (1.0-c)*v.x*v.y+s*v.z, c+(1.0-c)*v.y*v.y, (1.0-c)*v.y*v.z-s*v.x,
             (1.0-c)*v.x*v.z-s*v.y, (1.0-c)*v.y*v.z+s*v.x, c+(1.0-c)*v.z*v.z); 
}

mat3  rotationMatrix3(vector v, float angle)
{ float c = cos(radians(angle)), s = sin(radians(angle)); 
  return mat3(c+(1.0-c)*v[0]*v[0], (1.0-c)*v[0]*v[1]-s*v[2], (1.0-c)*v[0]*v[2]+s*v[1], 
             (1.0-c)*v[0]*v[1]+s*v[2], c+(1.0-c)*v[1]*v[1], (1.0-c)*v[1]*v[2]-s*v[0],
             (1.0-c)*v[0]*v[2]-s*v[1], (1.0-c)*v[1]*v[2]+s*v[0], c+(1.0-c)*v[2]*v[2]); 
}

mat3 __operator__mul__(mat3 A, mat3 B) 
{
  return mat3(A.m00*B.m00+A.m01*B.m10+A.m02*B.m20, A.m00*B.m01+A.m01*B.m11+A.m02*B.m21, A.m00*B.m02+A.m01*B.m12+A.m02*B.m22,
              A.m10*B.m00+A.m11*B.m10+A.m12*B.m20, A.m10*B.m01+A.m11*B.m11+A.m12*B.m21, A.m10*B.m02+A.m11*B.m12+A.m12*B.m22, 
              A.m20*B.m00+A.m21*B.m10+A.m22*B.m20, A.m20*B.m01+A.m21*B.m11+A.m22*B.m21, A.m20*B.m02+A.m21*B.m12+A.m22*B.m22); 
}
vec3 __operator__mul__(vec3 v, mat3 m) 
{
 return vec3(v.x*m.m00+v.y*m.m01+v.z*m.m02, v.x*m.m10+v.y*m.m11+v.z*m.m12, v.x*m.m20+v.y*m.m21+v.z*m.m22); 
}


vector __operator__mul__(vector v, mat3 m) 
{
 return vector(v[0]*m.m00+v[1]*m.m01+v[2]*m.m02, v[0]*m.m10+v[1]*m.m11+v[2]*m.m12, v[0]*m.m20+v[1]*m.m21+v[2]*m.m22); 
}

mat3 rotationMatrixXYZ(vec3 v) {
    return rotationMatrix3(vec3(1.0,0.0,0.0), v.x)*
    rotationMatrix3(vec3(0.0,1.0,0.0), v.y)*
    rotationMatrix3(vec3(0.0,0.0,1.0), v.z);
}

mat3 rotationMatrixXYZ(vector v) {
    return rotationMatrix3(vector(1.0,0.0,0.0), v[0])*
    rotationMatrix3(vector(0.0,1.0,0.0), v[1])*
    rotationMatrix3(vector(0.0,0.0,1.0), v[2]);
}

mat3 euler_rotation(vector rot)
{
    vector v1=vector(-rot[0],-rot[1],-rot[2]);
    vector v2=radians(v1);
    vector rot_rad = v2;

    float cosx = cos(rot_rad[0]);
    float sinx = sin(rot_rad[0]);
    mat3 x = mat3(1.,            0.,              0.,        
                      0.,            cosx,           -sinx,   
                      0.,            sinx,          cosx           
                      );

    float cosy = cos(rot_rad[1]);
    float siny = sin(rot_rad[1]);
    mat3 y = mat3(cosy,         0.,              siny,           
                      0.,            1.,              0.,            
                      -siny,        0.,              cosy
                 );

    float cosz = cos(rot_rad[2]);
    float sinz = sin(rot_rad[2]);
    mat3 z = mat3(cosz,         -sinz,          0.,              
                      sinz,         cosz,           0.,        
                      0.,            0.,              1.
                );

    mat3 xform ;
    xform.m00=1.;
    xform.m01=0.;
    xform.m02=0.;
    xform.m10=0.;
    xform.m11=1.;
    xform.m12=0.;
    xform.m20=0.;
    xform.m21=0.;
    xform.m22=1.;
    xform = xform*x;
    xform = xform*y;
    xform = xform*z;

    return xform;
}

mat3 euler_rotation(vec3 rot)
{
    vector v1=vector(-rot.x,-rot.y,-rot.z);
    vector v2=radians(v1);
    vec3 rot_rad = vec3(v2[0],v2[1],v2[2]);

    float cosx = cos(rot_rad.x);
    float sinx = sin(rot_rad.x);
    mat3 x = mat3(1.,            0.,              0.,        
                      0.,            cosx,           -sinx,   
                      0.,            sinx,          cosx           
                      );

    float cosy = cos(rot_rad.y);
    float siny = sin(rot_rad.y);
    mat3 y = mat3(cosy,         0.,              siny,           
                      0.,            1.,              0.,            
                      -siny,        0.,              cosy
                 );

    float cosz = cos(rot_rad.z);
    float sinz = sin(rot_rad.z);
    mat3 z = mat3(cosz,         -sinz,          0.,              
                      sinz,         cosz,           0.,        
                      0.,            0.,              1.
                );

    mat3 xform ;
    xform.m00=1.;
    xform.m01=0.;
    xform.m02=0.;
    xform.m10=0.;
    xform.m11=1.;
    xform.m12=0.;
    xform.m20=0.;
    xform.m21=0.;
    xform.m22=1.;
    xform = xform*x;
    xform = xform*y;
    xform = xform*z;

    return xform;
}

vec3 wrap(vec3 x, vec3 a, vec3 s)
{
	x = x-s;
	vec3 out= vec3 (x.x - a.x * floor(x.x / a.x) + s.x, x.y - a.y * floor(x.y / a.y) + s.y, x.z - a.z * floor(x.z / a.z) + s.z);
	return out;
}
	
#define UV_MODE_LINEAR 0

#define ADD_COLOR_PARAMS int ColorIterations = 16, \
int UMode = UV_MODE_LINEAR, \
float UScale = 1.
//int VMode = UV_MODE_LINEAR, \
//float VScale = 1

#define INIT_ORBIT_TRAP float colorValue = 10000.0
#define APPLY_ORBIT_TRAP   c.u = colorValue * UScale
		  
    shader OslGeometry(
// Fractal Parameters
    int Iterations = 250,
    float Bailout = 10.0,		
   
    int inv=0,
	float offsetX=0.,
	float offsetY=0.,
	float offsetZ=0.,
	float maxR2d1=1.0,
	float aConstantX=0.,
	float aConstantY=0.,
	float aConstantZ=0.,
	float DEscale=1.0,
	
	float kR=1.9,
	float kI=0.073043,
   
   	float boxX=1.,
	float boxY=1.,
	float boxZ=1.,
	
	int sph=0,
	float clampy=0.05,
	float offset1=1.,
	
    float alpha=0.,
    float beta=0.,
    float gamma=0.,
        

// Global Parameters
    float juliax=0.,
    float juliay=0.,
    float juliaz=0.,
    
    ADD_COLOR_PARAMS,	

    output _sdf c = _SDFDEF)
{

    vec3 z =vec3 (P[0],P[1],P[2]);
    vec3 Julia=vec3(juliax,juliay,juliaz);
	vec3 offset=vec3(offsetX,offsetY,offsetZ);
	vec3 aConstant=vec3(aConstantX,aConstantY,aConstantZ);
	vec3 Boxoffset=vec3(boxX,boxY,boxZ);
    vector rotationangles=vector(alpha,beta,gamma);	
    mat3 rot=euler_rotation(rotationangles);	
	
	float rr=dot(z,z);
	float dr=1.0;



vec3 JosLeysKleinian(output float rr,output float dr)
{
  // kleinian
  float a = kR;
  float b = kI;
  float f = sign(b);

  vec3 box_size = Boxoffset;

  vec3 box1 = vec3(2.0 * box_size.x, a * box_size.y, 2.0 * box_size.z);
  vec3 box2 = vec3(-box_size.x, -box_size.y + 1.0, -box_size.z);
  vec3 wrapped = wrap(z, box1, box2);

  z = vec3(wrapped.x, wrapped.y, wrapped.z);

  // If above the separation line, rotate by 180deg about (-b/2, a/2)
  if (z.y >= a * (0.5 + 0.2 * sin(f * M_PI * (z.x + b * 0.5) / box_size.x)))
    z = vec3(-b, a, 0.) - z; // z.xy = vec2(-b, a) - z.xy;

    rr = dot(z,z);

//  vec4 colorVector = vec4(z.x, z.y, z.z, rr);
//  aux.color = min(aux.color, colorVector.Length()); // For coloring

  float iR = 1.0 / rr;
  z = z* (-iR);
  z.x = -b - z.x;
  z.y = a + z.y;

  dr = dr * fabs(iR);
  return z;
}


  // sphere inversion slot#1 iter == 0
  if (inv==1)
  {
      float rr = 1.0;
      z = z + offset;
      rr = dot(z,z);
      z = z* maxR2d1 / rr;
      z = z+ aConstant - offset;
      dr = dr *( maxR2d1 / rr) * DEscale;
  }
  
	INIT_ORBIT_TRAP;
    for (int i = 0; i < Iterations ; i++) 
    {
      z= JosLeysKleinian(rr,dr);
            z= z*rot;
      z=z + Julia;   

	  rr=dot(z,z); 
	  if (rr > Bailout) break;
	  if (i < ColorIterations) colorValue = min(colorValue, rr);
	}
	
	if (sph==1)
		z.y = min(z.y, kR - z.y);
	c.dist =	min(z.y, clampy)/ max(dr, offset1);
	APPLY_ORBIT_TRAP;
}	